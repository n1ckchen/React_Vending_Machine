{"version":3,"sources":["Message.js","VendingMachine.png","VendingMachine.js","Sardines.js","Chips.png","Chips.js","Soda.png","Soda.js","App.js","serviceWorker.js","index.js"],"names":["Message","children","className","VendingMachine","style","backgroundImage","vendingMachineImg","to","Sardines","Chips","useState","bags","setBags","b","map","bag","i","src","chipsImg","top","y","left","x","alt","length","onClick","window","innerWidth","Math","random","innerHeight","prevBags","Soda","sodaImg","App","exact","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6TAWeA,MARf,YAA8B,IAAZC,EAAW,EAAXA,SAChB,OACE,qBAAKC,UAAU,UAAf,SACGD,KCNQ,G,MAAA,IAA0B,4CC+B1BE,MAzBf,WAEE,OACE,sBACED,UAAU,iBACVE,MAAO,CAAEC,gBAAgB,OAAD,OAASC,EAAT,MAF1B,UAIE,cAAC,EAAD,UACE,6FAEF,eAAC,EAAD,WACE,6BACE,cAAC,IAAD,CAAMC,GAAG,QAAT,oBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,SAAT,qBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,YAAT,qC,MCFKC,MAjBf,WAEE,OACE,qBACEN,UAAU,WACVE,MAAO,CACLC,gBACE,8DAJN,SAME,eAAC,EAAD,WACE,yFACA,6BAAI,cAAC,IAAD,CAAME,GAAG,IAAT,6B,gBChBG,MAA0B,kC,MCwC1BE,MAjCf,WAEE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAQMC,EAAIF,EAAKG,KAAI,SAACC,EAAKC,GAAN,OACjB,qBAEEC,IAAKC,EACLhB,UAAU,MACVE,MAAO,CAAEe,IAAI,GAAD,OAAKJ,EAAIK,EAAT,MAAgBC,KAAK,GAAD,OAAKN,EAAIO,EAAT,OAChCC,IAAI,sBAJCP,MAOT,OACE,sBAAKd,UAAU,QAAf,UACE,eAAC,EAAD,WACE,8CAAiBS,EAAKa,UACtB,wBAAQC,QAnBd,WACE,IAAMH,EAAII,OAAOC,WAAaC,KAAKC,SAC7BT,EAAIM,OAAOI,YAAcF,KAAKC,SACpCjB,GAAQ,SAAAmB,GAAQ,4BAAQA,GAAR,CAAkB,CAAET,IAAGF,WAgBnC,yBACA,6BACE,cAAC,IAAD,CAAMb,GAAG,IAAT,0BAGHM,MCnCQ,MAA0B,iC,MCoB1BmB,MAdf,WAEE,OACE,sBAAK9B,UAAU,OAAf,UACE,qBAAKe,IAAKgB,EAASV,IAAI,kBACvB,eAAC,EAAD,WACE,+CACA,6BAAI,cAAC,IAAD,CAAMhB,GAAG,IAAT,0BAEN,qBAAKU,IAAKgB,EAASV,IAAI,sBCcdW,MArBf,WACE,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,QAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,SAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,YAAlB,SACE,cAAC,EAAD,YCVUC,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.da592bb2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Message.css\";\n\nfunction Message({children}) {\n  return (\n    <div className=\"Message\">\n      {children}\n    </div>\n  )\n}\n\nexport default Message;\n","export default __webpack_public_path__ + \"static/media/VendingMachine.ac92bb0d.png\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Message from \"./Message\";\nimport \"./VendingMachine.css\";\nimport vendingMachineImg from \"./VendingMachine.png\";\n\nfunction VendingMachine() {\n  /* getting css from solution because it looks cool */\n  return (\n    <div\n      className=\"VendingMachine\"\n      style={{ backgroundImage: `url(${vendingMachineImg})` }}\n    >\n      <Message>\n        <h1>hello i am a vending machine. what would you like to eat?</h1>\n      </Message>\n      <Message>\n        <h1>\n          <Link to=\"/soda\">soda</Link>\n        </h1>\n        <h1>\n          <Link to=\"/chips\">chips</Link>\n        </h1>\n        <h1>\n          <Link to=\"/sardines\">fresh sardines</Link>\n        </h1>\n      </Message>\n    </div>\n  );\n}\n\nexport default VendingMachine;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Message from \"./Message\";\nimport \"./Sardines.css\";\n\nfunction Sardines() {\n  /* getting css from solution because it looks cool */\n  return (\n    <div\n      className=\"Sardines\"\n      style={{\n        backgroundImage:\n          \"url(https://media.giphy.com/media/tVk4w6EZ7eGNq/giphy.gif)\"\n      }}>\n      <Message>\n        <h1>you don't eat the sardines. the sardines, they eat you!</h1>\n        <h1><Link to=\"/\">go back</Link></h1>\n      </Message>\n    </div>\n  );\n}\n\nexport default Sardines;\n","export default __webpack_public_path__ + \"static/media/Chips.c7e44957.png\";","import React, { useState } from \"react\";\nimport chipsImg from \"./Chips.png\";\nimport { Link } from \"react-router-dom\";\nimport Message from \"./Message\";\nimport \"./Chips.css\";\n/* getting css from solution because it looks cool */\n\nfunction Chips() {\n\n  const [bags, setBags] = useState([]);\n\n  function handleClick() {\n    const x = window.innerWidth * Math.random();\n    const y = window.innerHeight * Math.random();\n    setBags(prevBags => [...prevBags, { x, y }]);\n  }\n\n  const b = bags.map((bag, i) => (\n    <img\n      key={i}\n      src={chipsImg}\n      className=\"bag\"\n      style={{ top: `${bag.y}px`, left: `${bag.x}px` }}\n      alt=\"bag of lay's chips\"\n    />\n  ));\n  return (\n    <div className=\"Chips\">\n      <Message>\n        <h1>bags eaten: {bags.length}</h1>\n        <button onClick={handleClick}>nom nom nom</button>\n        <h1>\n          <Link to=\"/\">go back</Link>\n        </h1>\n      </Message>\n      {b}\n    </div>\n  );\n}\n\nexport default Chips;\n","export default __webpack_public_path__ + \"static/media/Soda.8db7d5c9.png\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Message from \"./Message\";\nimport sodaImg from \"./Soda.png\";\nimport \"./Soda.css\";\n\nfunction Soda() {\n  /* getting css from solution because it looks cool */\n  return (\n    <div className=\"Soda\">\n      <img src={sodaImg} alt=\"coca cola can\" />\n      <Message>\n        <h1>OMG SUGARRRRR</h1>\n        <h1><Link to=\"/\">go back</Link></h1>\n      </Message>\n      <img src={sodaImg} alt=\"coca cola can\" />\n    </div>\n  );\n}\n\nexport default Soda;\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport VendingMachine from \"./VendingMachine\";\nimport Sardines from \"./Sardines\";\nimport Chips from \"./Chips\";\nimport Soda from \"./Soda\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\">\n          <VendingMachine />\n        </Route>\n        <Route exact path=\"/soda\">\n          <Soda />\n        </Route>\n        <Route exact path=\"/chips\">\n          <Chips />\n        </Route>\n        <Route exact path=\"/sardines\">\n          <Sardines />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}